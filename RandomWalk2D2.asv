%2D Random Walk Ver. 2
%Based on code from http://matlabnewbie.blogspot.com/2010/02/2d-random-walk-program.html

% This code is built for one trial to better visualize a path. The original random walk 2d program is written for a data-based analysis of multiple steps and trials; this is built for better visualization of a 2d random walk

% Based on setup from http://en.wikipedia.org/wiki/Random_walk#Variants_of_random_walks
%Emulates coming to a 4-way intersection in a city and having to pick a direction, with all directions being of equal probability


%% initialize
clear
clf
clc


%% Change these variables
% Probability: Equal for all 4 directions

%Number of steps
steps = 10;

%Number of trials is 1 

%% Code - don’t edit below here for trials

% We can improve code speed by initializing the whole matrix rather than growing it with each loop

% Coordinate pairs
%Note that each pair is a final displacement, not the change since the last move
x=zeros(3, steps);
y=zeros(3, steps); 

% initialize an index i for looping through the coordinates
% First coordinate will be 0,0 -> origin

%We initialize this out of the loop to optimize memory use.
J=0;
 % Steps-1 because the loop sets the value of the NEXT (i.e. i+1) coordinate pair, so when you get to the last value, setting the “next” value would be out of the matrix.
for i=1:(steps-1)
	%Generate a random number for each move. 
J=rand; % Value will be from 0 to 1

if J<0.25
	%Move to right, i.e. x+1
x(i+1)=x(i)+1;
y(i+1)=y(i);
elseif J<0.5
	%Move to the left, i.e. x-1
x(i+1)=x(i)-1;
y(i+1)=y(i);
elseif J<0.75
	%Move up, i.e. y+1
x(i+1)=x(i);
y(i+1)=y(i)+1;
else 
	% (if J <=1)
	% move down, i.e. y-1
x(i+1)=x(i);
y(i+1)=y(i)-1;
end % End probability loop
end %end all steps

plot(x(1,:),y(1,:),x(2,:),y(2,:),x(3,:),y(3,:))
title('Random Walk in 2 Dimensions');
xlabel('X Displacement');
ylabel('Y Displacement');